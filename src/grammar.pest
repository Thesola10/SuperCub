alpha = _{'a'..'z'|'A'..'Z'}
digit = _{'0'..'9'}

// In C, newlines are a kind of whitespace
WHITESPACE   = _{" " | "\t" | NEWLINE}

_sl_comment = @{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
_ml_comment = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ _sl_comment | _ml_comment }

ident = @{ (alpha | "_") ~ (alpha|digit|"_")* }

type_ident = { "ident" }
type_expr = { "expr" }
type_tt = { "tt" }
_type = { type_ident | type_expr | type_tt }

param = { "$" ~ ident ~ (":" ~ _type)? }
param_set = _{ "(" ~ (param ~ ("," ~ param)* )? ~ ")" }

var_base = ${ "$" ~ ident }
var_num_digit = @{ '0'..'9' }
var_num = ${ "$" ~ var_num_digit }
var_star = @{ "$*" }
var_any = { var_star | var_num | var_base }
var_string = ${ "#" ~ var_any }

// Supported variable operators. Currently only assign/append
assign_eq = { "=" }
assign_append = { "+=" }
assign = { assign_eq | assign_append }

var_op = { "${" ~ ident ~ assign ~ c_inner_chunk ~ c_stmt_inner ~ "}" }

macro_call = { ident ~ "!" ~ arg_set }

// Arguments refer to macro calls, while params refer to macro definitions
arg_inner = _{ !("("|","|")") ~ ANY }
argument = { arg_inner+ }
arg_set = _{ "(" ~ (argument ~ ("," ~ argument)* )? ~ ")" }

_match = { param_set ~ "=>" ~ "{" ~ c_chunk* ~ "}" }
fn_match = { "fn" ~ _match }
var_match = { "var" ~ _match }
type_match = { "type" ~ _match }

any_match = { fn_match | var_match | type_match | _match }


kw_macro_rules = _{"macro_rules!"}
macro_rules = { kw_macro_rules ~ ident ~ "{" ~ any_match* ~ "}" }

// Try to ignore semantically irrelevant semicolons and braces
c_q_semicolon = _{ "';'" }
c_q_bracket = _{ "'{'" | "'}'" }
c_str_inner = _{ "\\\"" | (!"\"" ~ ANY)* }
c_str = _{ "\"" ~ c_str_inner ~ "\"" }

// Intended for functions and the like which don't end in semicolon
c_block_inner = _{ c_q_bracket | c_str | !("{"|"}") ~ ANY }
c_bare_block = _{ "{" ~ (infix|c_block_inner)* ~ c_bare_block* ~ (infix|c_block_inner)* ~ "}" }
c_block = { (infix|c_block_inner)* ~ c_bare_block }

// Uses c_bare_block as a bracket counter
c_stmt_inner = _{ c_q_bracket | c_q_semicolon | c_str | !("{"|";"|"}") ~ ANY }
c_stmt = { (infix|c_bare_block|c_stmt_inner)* ~ ";" }

c_incl_inner = _{ !("\""|"<"|">") ~ ANY }
c_incl_sys = @{ "<" ~ c_incl_inner* ~ ">" }
c_incl_str = @{ "\"" ~ c_incl_inner* ~ "\"" }
c_incl_path = { c_incl_sys | c_incl_str }
c_include = { "#" ~ "include" ~ c_incl_path }

// Generic macros are of interest to us -- e.g. ifdef __SUPER_CUB__
c_macro = @{ "#" ~ (!NEWLINE ~ ANY)* ~ !"\\" ~ NEWLINE }

c_chunk = { c_include | c_macro | infix | c_stmt | c_block }
c_inner_chunk = { infix | c_block | c_stmt_inner* }

// Chunking allows us to isolate the captured statement for decors
decor = { "#[" ~ ident ~ arg_set? ~ "]" ~ c_chunk }

infix = { macro_call | var_op | var_string | var_any }
chunk = { COMMENT | NEWLINE | macro_rules | decor | c_chunk }
document = { SOI ~ (chunk)* ~ EOI }
