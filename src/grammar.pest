alpha = _{'a'..'z'|'A'..'Z'}
digit = _{'0'..'9'}

WHITESPACE   = _{" " | "\t" | NEWLINE}

_sl_comment = @{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
_ml_comment = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ _sl_comment | _ml_comment }

kw_macro_rules = _{"macro_rules!"}

ident = @{ (alpha | "_") ~ (alpha|digit|"_")* }

type_ident = { "ident" }
type_expr = { "expr" }
type_tt = { "tt" }
type = _{ type_ident | type_expr | type_tt }

param = { "$" ~ ident ~ (":" ~ type)? }
param_set = { "(" ~ (param ~ ("," ~ param)* )? ~ ")" }

var_base = @{ "$" ~ ident }
var_string = @{ "#" ~ var_base }
assign_eq = { "=" }
assign_append = { "+=" }
assign = _{ assign_eq | assign_append }
var_op = { "${" ~ ident ~ assign ~ c_inner_chunk ~ "}" }

macro_call = { ident ~ "!" ~ arg_set }
infix = { macro_call | var_op | var_string | var_base }

arg_inner = _{ !("("|","|")") ~ ANY }
argument = { arg_inner+ }
arg_set = { "(" ~ (argument ~ ("," ~ argument)* )? ~ ")" }

match = { param_set ~ "=>" ~ "{" ~ c_chunk* ~ "}" }
fn_match = { "fn" ~ match }
var_match = { "var" ~ match }
type_match = { "type" ~ match }

any_match = _{ fn_match | var_match | type_match | match }


macro_rules = { kw_macro_rules ~ ident ~ "{" ~ any_match* ~ "}" }

c_block_inner = _{ !("{"|"}") ~ ANY }
c_block = { (infix|c_block_inner)* ~ "{" ~ c_block* ~ c_block_inner* ~ "}" }
c_stmt_inner = _{ !("{"|";"|"}") ~ ANY }
c_stmt = { (infix|c_block|c_stmt_inner)* ~ ";" }
c_incl_inner = _{ !("\""|"<"|">") ~ ANY }
c_incl_sys = @{ "<" ~ c_incl_inner* ~ ">" }
c_incl_str = @{ "\"" ~ c_incl_inner* ~ "\"" }
c_incl_path = { c_incl_sys | c_incl_str }
c_include = { "#" ~ "include" ~ c_incl_path }
c_chunk = { c_include | infix | c_block | c_stmt }
c_inner_chunk = { infix | c_block | c_stmt_inner* }

decor = { "#[" ~ ident ~ arg_set? ~ "]" ~ c_chunk }

chunk = _{ COMMENT | NEWLINE | macro_rules | decor | c_chunk }
document = { (chunk)* }
